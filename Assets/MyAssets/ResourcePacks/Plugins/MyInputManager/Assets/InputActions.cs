//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/MyAssets/ResourcePacks/Plugins/MyInputManager/Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GamePlay"",
            ""id"": ""5ed32db6-a9e6-4df8-b22f-7e3726b11a35"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""da320e20-8a13-49c8-8be8-8a73885cdb8e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveBoost"",
                    ""type"": ""Value"",
                    ""id"": ""89836cf1-7457-42ca-b127-87eb4e58237c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Value"",
                    ""id"": ""06d4df04-6d43-4864-9ceb-720fca81542d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Value"",
                    ""id"": ""a34b85be-68d2-493a-be79-d5c39f9571ee"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PickUPItem"",
                    ""type"": ""Value"",
                    ""id"": ""e09b2cd9-df65-41a3-bb22-2afa7b636989"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FinalSkill"",
                    ""type"": ""Value"",
                    ""id"": ""086f6bd5-d376-47fd-a084-e3cc2599d0ca"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ExchangeWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""c270d12f-8211-47ce-a59b-bd7dbb624b3f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4afac2a6-a811-478b-b247-59dd93778080"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""eba0ff1a-556c-4a58-9acb-400cdadc8531"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b8f298ef-74b5-4d06-a3ab-f6090cf71e87"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5c6c24fc-8f51-47eb-9e1a-124ff56ccf39"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c3546e1f-189e-420f-bcf2-d82e47a2b4eb"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9bf774a5-a03a-4a21-8502-f2e03c18fa33"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2e1e5676-e418-4629-b8ab-6e6b832bddeb"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5a6f1ec9-da64-4302-a17a-f1d6c4d10da1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PickUPItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb765f67-95f9-4234-bd20-66a1e7f9d9ce"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveBoost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6c444bfe-e675-4ef4-8f2d-9953c5da8a78"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FinalSkill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dc712e5-3398-4430-8857-45957c4ab756"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ExchangeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIPlay"",
            ""id"": ""82194e88-544a-410f-a4b3-30e58fc57918"",
            ""actions"": [
                {
                    ""name"": ""Return"",
                    ""type"": ""Value"",
                    ""id"": ""95cfe040-82cd-4b02-ae07-48cd25ed117f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5de733f-0297-40b8-8de5-067253457d31"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""UIPlay"",
            ""bindingGroup"": ""UIPlay"",
            ""devices"": []
        }
    ]
}");
        // GamePlay
        m_GamePlay = asset.FindActionMap("GamePlay", throwIfNotFound: true);
        m_GamePlay_Move = m_GamePlay.FindAction("Move", throwIfNotFound: true);
        m_GamePlay_MoveBoost = m_GamePlay.FindAction("MoveBoost", throwIfNotFound: true);
        m_GamePlay_Attack = m_GamePlay.FindAction("Attack", throwIfNotFound: true);
        m_GamePlay_UseItem = m_GamePlay.FindAction("UseItem", throwIfNotFound: true);
        m_GamePlay_PickUPItem = m_GamePlay.FindAction("PickUPItem", throwIfNotFound: true);
        m_GamePlay_FinalSkill = m_GamePlay.FindAction("FinalSkill", throwIfNotFound: true);
        m_GamePlay_ExchangeWeapon = m_GamePlay.FindAction("ExchangeWeapon", throwIfNotFound: true);
        // UIPlay
        m_UIPlay = asset.FindActionMap("UIPlay", throwIfNotFound: true);
        m_UIPlay_Return = m_UIPlay.FindAction("Return", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GamePlay
    private readonly InputActionMap m_GamePlay;
    private List<IGamePlayActions> m_GamePlayActionsCallbackInterfaces = new List<IGamePlayActions>();
    private readonly InputAction m_GamePlay_Move;
    private readonly InputAction m_GamePlay_MoveBoost;
    private readonly InputAction m_GamePlay_Attack;
    private readonly InputAction m_GamePlay_UseItem;
    private readonly InputAction m_GamePlay_PickUPItem;
    private readonly InputAction m_GamePlay_FinalSkill;
    private readonly InputAction m_GamePlay_ExchangeWeapon;
    public struct GamePlayActions
    {
        private @InputActions m_Wrapper;
        public GamePlayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GamePlay_Move;
        public InputAction @MoveBoost => m_Wrapper.m_GamePlay_MoveBoost;
        public InputAction @Attack => m_Wrapper.m_GamePlay_Attack;
        public InputAction @UseItem => m_Wrapper.m_GamePlay_UseItem;
        public InputAction @PickUPItem => m_Wrapper.m_GamePlay_PickUPItem;
        public InputAction @FinalSkill => m_Wrapper.m_GamePlay_FinalSkill;
        public InputAction @ExchangeWeapon => m_Wrapper.m_GamePlay_ExchangeWeapon;
        public InputActionMap Get() { return m_Wrapper.m_GamePlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GamePlayActions set) { return set.Get(); }
        public void AddCallbacks(IGamePlayActions instance)
        {
            if (instance == null || m_Wrapper.m_GamePlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MoveBoost.started += instance.OnMoveBoost;
            @MoveBoost.performed += instance.OnMoveBoost;
            @MoveBoost.canceled += instance.OnMoveBoost;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @UseItem.started += instance.OnUseItem;
            @UseItem.performed += instance.OnUseItem;
            @UseItem.canceled += instance.OnUseItem;
            @PickUPItem.started += instance.OnPickUPItem;
            @PickUPItem.performed += instance.OnPickUPItem;
            @PickUPItem.canceled += instance.OnPickUPItem;
            @FinalSkill.started += instance.OnFinalSkill;
            @FinalSkill.performed += instance.OnFinalSkill;
            @FinalSkill.canceled += instance.OnFinalSkill;
            @ExchangeWeapon.started += instance.OnExchangeWeapon;
            @ExchangeWeapon.performed += instance.OnExchangeWeapon;
            @ExchangeWeapon.canceled += instance.OnExchangeWeapon;
        }

        private void UnregisterCallbacks(IGamePlayActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MoveBoost.started -= instance.OnMoveBoost;
            @MoveBoost.performed -= instance.OnMoveBoost;
            @MoveBoost.canceled -= instance.OnMoveBoost;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @UseItem.started -= instance.OnUseItem;
            @UseItem.performed -= instance.OnUseItem;
            @UseItem.canceled -= instance.OnUseItem;
            @PickUPItem.started -= instance.OnPickUPItem;
            @PickUPItem.performed -= instance.OnPickUPItem;
            @PickUPItem.canceled -= instance.OnPickUPItem;
            @FinalSkill.started -= instance.OnFinalSkill;
            @FinalSkill.performed -= instance.OnFinalSkill;
            @FinalSkill.canceled -= instance.OnFinalSkill;
            @ExchangeWeapon.started -= instance.OnExchangeWeapon;
            @ExchangeWeapon.performed -= instance.OnExchangeWeapon;
            @ExchangeWeapon.canceled -= instance.OnExchangeWeapon;
        }

        public void RemoveCallbacks(IGamePlayActions instance)
        {
            if (m_Wrapper.m_GamePlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGamePlayActions instance)
        {
            foreach (var item in m_Wrapper.m_GamePlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GamePlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GamePlayActions @GamePlay => new GamePlayActions(this);

    // UIPlay
    private readonly InputActionMap m_UIPlay;
    private List<IUIPlayActions> m_UIPlayActionsCallbackInterfaces = new List<IUIPlayActions>();
    private readonly InputAction m_UIPlay_Return;
    public struct UIPlayActions
    {
        private @InputActions m_Wrapper;
        public UIPlayActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Return => m_Wrapper.m_UIPlay_Return;
        public InputActionMap Get() { return m_Wrapper.m_UIPlay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIPlayActions set) { return set.Get(); }
        public void AddCallbacks(IUIPlayActions instance)
        {
            if (instance == null || m_Wrapper.m_UIPlayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIPlayActionsCallbackInterfaces.Add(instance);
            @Return.started += instance.OnReturn;
            @Return.performed += instance.OnReturn;
            @Return.canceled += instance.OnReturn;
        }

        private void UnregisterCallbacks(IUIPlayActions instance)
        {
            @Return.started -= instance.OnReturn;
            @Return.performed -= instance.OnReturn;
            @Return.canceled -= instance.OnReturn;
        }

        public void RemoveCallbacks(IUIPlayActions instance)
        {
            if (m_Wrapper.m_UIPlayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIPlayActions instance)
        {
            foreach (var item in m_Wrapper.m_UIPlayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIPlayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIPlayActions @UIPlay => new UIPlayActions(this);
    private int m_UIPlaySchemeIndex = -1;
    public InputControlScheme UIPlayScheme
    {
        get
        {
            if (m_UIPlaySchemeIndex == -1) m_UIPlaySchemeIndex = asset.FindControlSchemeIndex("UIPlay");
            return asset.controlSchemes[m_UIPlaySchemeIndex];
        }
    }
    public interface IGamePlayActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMoveBoost(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnPickUPItem(InputAction.CallbackContext context);
        void OnFinalSkill(InputAction.CallbackContext context);
        void OnExchangeWeapon(InputAction.CallbackContext context);
    }
    public interface IUIPlayActions
    {
        void OnReturn(InputAction.CallbackContext context);
    }
}
